"use client";

import Link from "next/link";
import { useState, useEffect } from "react";
import Navbar from "../providers/navbar";
import { useSearchParams, useRouter } from 'next/navigation';
import { useAuth } from "../hooks/useAuth";
import StatusNotification from "../components/status-notification";

export default function Login() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [showMessage, setShowMessage] = useState(searchParams.get('registered') === 'true');
  const [errorMessage, setErrorMessage] = useState('');
  const [accountStatus, setAccountStatus] = useState<'active' | 'pending' | 'inactive' | null>(null);
  const { login, loading, error, isAuthenticated, user } = useAuth();
  
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [selectedRole, setSelectedRole] = useState('gym-owner');
  
  // Get the callback URL if one was provided
  const callbackUrl = searchParams.get('callbackUrl') || '/dashboard';
  const [systemInitialized, setSystemInitialized] = useState(false);

  // Helper function to determine dashboard path based on role
  const getDashboardPathForRole = (role: string): string => {
    switch (role) {
      case 'gym-owner':
        return '/dashboard/gym-owner';
      case 'trainer':
        return '/dashboard/trainer';
      case 'member':
        return '/dashboard/member';
      case 'super-admin':
        return '/dashboard/super-admin';
      default:
        return '/dashboard';
    }
  };

  // Check if session was expired or user was logged out
  useEffect(() => {
    const from = searchParams.get('from');
    if (from === 'session_expired') {
      setErrorMessage('Your session has expired. Please log in again.');
    } else if (from === 'logout') {
      setShowMessage(true);
    }
  }, [searchParams]);

  // Check if user is already authenticated
  useEffect(() => {
    if (isAuthenticated && user) {
      const dashboardPath = getDashboardPathForRole(user.role);
      router.push(dashboardPath);
    }
  }, [isAuthenticated, user, router]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage('');
    setAccountStatus(null);
    
    try {
      const result = await login(formData.email, formData.password, selectedRole);
      
      if (!result.success) {
        throw new Error(result.error instanceof Error ? result.error.message : 'Login failed');
      }
      
      if (callbackUrl !== '/dashboard') {
        router.push(callbackUrl);
      } else if (user) {
        router.push(getDashboardPathForRole(user.role));
      }
      
    } catch (error: any) {
      const errorMsg = error.message || 'Login failed. Please check your credentials.';
      
      if (errorMsg.includes('pending approval')) {
        setAccountStatus('pending');
      } else if (errorMsg.includes('deactivated') || errorMsg.includes('inactive')) {
        setAccountStatus('inactive');
      } else if (errorMsg.includes('Invalid credentials')) {
        setErrorMessage('Invalid email or password. Please try again.');
      } else {
        setErrorMessage(errorMsg);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
      <Navbar />
      <div className="pt-16 flex items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <h1 className="text-2xl font-bold text-center mb-6">Welcome Back</h1>
          
          {showMessage && (
            <div className="mb-4 p-3 bg-green-100 text-green-800 rounded">
              {searchParams.get('from') === 'logout' 
                ? "Logout successful! You have been securely signed out."
                : "Registration successful! Please log in to continue."}
            </div>
          )}
          
          {errorMessage && (
            <div className="mb-4 p-3 bg-red-100 text-red-800 rounded">
              {errorMessage}
            </div>
          )}
          
          {accountStatus && (
            <div className="mb-4">
              <StatusNotification status={accountStatus} />
            </div>
          )}
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium">Email</label>
              <input
                type="email"
                id="email"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium">Password</label>
              <input
                type="password"
                id="password"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              />
            </div>
            
            <div>
              <label htmlFor="role" className="block text-sm font-medium">I am a</label>
              <select
                id="role"
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
              >
                <option value="gym-owner">Gym Owner</option>
                <option value="trainer">Trainer</option>
                <option value="member">Member</option>
                {selectedRole === 'super-admin' && (
                  <option value="super-admin">Super Admin</option>
                )}
              </select>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm">
                  Remember me
                </label>
              </div>
              
              <Link href="/forgot-password" className="text-sm text-blue-600 hover:underline">
                Forgot password?
              </Link>
            </div>
            
            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                {loading ? "Signing in..." : "Sign in"}
              </button>
            </div>
          </form>
          
          <div className="mt-6 text-center">
            <p className="text-sm">
              New to GymSync?{" "}
              <Link href="/register" className="text-blue-600 hover:underline">
                Create an account
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
